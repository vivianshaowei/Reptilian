1、list

list集合；abc=['a','b','bb']

list集合，可以是任何数据类型，用len()来获取list元素的长度
用索引来访问list中每一个元素的位置，索引从0开始。
如abc[0],值为a
当索引超出范围时，会报indexError错误。所以确保索引不要越界。
如果要获取最后一个元素，除了可以使用正向索引外，还可以使用负索引
如abc[-1],值为bb；abc[-3],值为a
list是一个可变的有序列表，所以可以使用append()追加元素
如abc.append('ccdd'),值为abc=['a','b','bb','ccdd']
制定位置插入元素，如插入到索引号为2的位置上
abc.insert(1,'hg'),值为abc=['a','hg','b','bb']
使用pop()删除list末尾的元素,pop()可以指定删除哪个索引的元素
abc.pop()，删除最后一个元素； abc.pop(2)，删除第三个元素
声明空list.  a=[],此时a的长度为0；
h=['C#', 'python', ['go', 'R'], 'c']
使用s[2][1],来获取值为go的元素

2、tuple

tuple是一种有序列表，叫元组。tuple和list非常类似，但是tuple一旦初始化就不能修改。
不可变的tuple有什么意义？因为tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。
tuple的陷阱：当你定义一个tuple时，在定义的时候，tuple的元素就必须被确定下来。
定义只有1个元素的tuple，要这样y=(1,)，而不能使用y=(1),因为()既可以表示tuple，又可以表示数学公式中的小括号
举例看下：
>>> t = ('a', 'b', ['A', 'B'])
>>> t[2][0] = 'X'
>>> t[2][1] = 'Y'
>>> t
('a', 'b', ['X', 'Y'])
表面上看，tuple的元素确实变了，但其实变的不是tuple的元素，而是list的元素。tuple一开始指向的list并没有改成别的list，
所以，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向'a'，就不能改成指向'b'，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！

3、dict字典
dict字典，以键值对来存储数据。
由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉
如果key不存在，dict就会报错：要避免key不存在的错误，
有两种办法，一是通过in判断key是否存在：
二是通过dict提供的get方法，如果key不存在，可以返回None，或者自己指定的value：
要删除一个key，用pop(key)方法，对应的value也会从dict中删除：
请务必注意，dict内部存放的顺序和key放入的顺序是没有关系的。

和list比较，dict有以下几个特点：

    查找和插入的速度极快，不会随着key的增加而变慢；
    需要占用大量的内存，内存浪费多。

而list相反：

    查找和插入的时间随着元素的增加而增加；
    占用空间小，浪费内存很少。
所以，dict是用空间来换取时间的一种方法。

dict可以用在需要高速查找的很多地方，在Python代码中几乎无处不在，正确使用dict非常重要，需要牢记的第一条就是dict的key必须是不可变对象。

这是因为dict根据key来计算value的存储位置，如果每次计算相同的key得出的结果不同，那dict内部就完全混乱了。这个通过key计算位置的算法称为哈希算法（Hash）。

要保证hash的正确性，作为key的对象就不能变。在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key


4、set

set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。

要创建一个set，需要提供一个list作为输入集合：
k = set([7, 8, 9])
如果set中有重复元素，会被自动过滤
k = set([1, 1, 2, 2, 3, 3])，计算后的k值为{1, 2, 3}
通过add(key)方法添加元素到set中，可重复添加，但结果会被过滤
通过remove(key)方法删除元素到set中
set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作
